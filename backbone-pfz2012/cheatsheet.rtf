{\rtf1\ansi\ansicpg1252\cocoartf1187
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww38200\viewh22520\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \
Voor de presentatie\

\b Vroeger
\b0 : plaatje browser - html-rendering-server - database\
Klik..\

\b Nu
\b0 : plaatje browser/android/apple - server - database\
\
We hebben drie librariies Zepto Underscore Backbone Even uitleggen wat die libraries zijn.\

\b Zepto
\b0 : vergelijkbaar met jquery, alleen selector\
Underscoe: Utility belt\
Backbone: De ruggegraat\
\
We gaan 
\b live coden
\b0 ! Maken een 
\b TODO app
\b0 . Het resultaat staat in github, zodat je het later kunt terugzien.\
\
We beginnen met een 
\b view
\b0 \
Een view is een component in backbone om gedrag en de weergave van elkaar te scheiden. Nog wat minder abstract: de html en de javascript voor event handling kunnen zo apart blijven.\
\
Mijn collega freek maakt nu een view aan.\
We gebruiken de extend functie. Extenden van een class in OO talen. Je kunt de bestaande view class uitbreiden met eigen functionaliteit.\
Minimale wat je altijd moet doen: de render functie implmenteren/aanmaken.\
... Coding\
Het property el zoals je nu ziet krijg je automatisch in backbone. Vervolgens gebruiken zepto om het element met onze inhoud te vullen.\
\
Nu gebeurt er nog niks, de render wordt nog niet aangeroep\
Freek maakt nu een instantie aan. en roept nu de render functie aan. Het element, bestaande uit html, wordt nu gegenereerd. Laatste stap is de gerenderde element in de pagina zetten.\
Mogelijke vragen: $ teken is de syntax van zowel JQuery als Zepto (niet meteen vertellen)\
	Dit lijkt omslachtig, maar als je grote applicaties hebt waar in 5 tot 10 mensen werken, dan is helpt je dit enorm om de applicatie onder-houdbaar te houden. Freek en ik werken in een team 10 mensen. Iedereen programmeert, maar niemand heeft zijn eigen stukje. (denk pas vertellen als iemand het echt vraagt).\
\
Nog wat customazation. De Todo world wordt nu in een div gezet, dat doen backbone. Wat als we een strong element willen?\
... Coding\
Classnames toevoegen kan ook...\
En events.\
... Coding\
\
Views einde nu 
\b Models
\b0  Nu de volgende stap, we gaan data in onze view zetten. Backbone biedt hiervoor de Model. Deze kun je ook extenden net als de view.\
We maken een Model genaamd Task. In tegenstelling tot de View hoef je bij de Model geen functionaliteit toe te voegen om er iets nuttigs mee te doen. In zijn meest simpele vorm is een Model een datacontainer. De Model heeft geen vaste structuur, je kunt er vanalles in stoppen.\
We maken wat instantaties van onze Task aan, met een property description.\
.. Coding\
Nu moeten we onze 
\b view aanpasse
\b0 n om de model instantie te kunnen weergeven. We geven ze als volgt door:\
.. Coding\
En verder moeten we wat doen met de model, Dit gebeurt in de render method\
.. Coding\
\
We laten nu maar een Todo item zien. Als we meerdere willen gebruiken, kunnen we de 
\b Collection
\b0  gebruiken. Een Collection is vergelijkbaar met een Model (extend een model) en is een lijst\
.. Coding\
We hebben nu een Tasks collection aangemaakt, waar ieder element weer een Task model is die we eerder hebben gemaakt. De nieuwe class gaan we instantieren\
.. Coding\
en we voegen de nieuwe elementen er aan toe\
... Coding\
Laatste stap is onze 
\b view aanpassen
\b0 , zodat alle tasks worden gerenderd in plaats van alle. We gebruiken de 
\b each
\b0  functie van de 
\b Underscore
\b0  library (dat is leesbaarder dan een for loop) In de render method wordt nu een html list opgebouwd door over de lijst te itereren.\
	Als iemand zich afvraagt of dit er ingewikkeld uitzien: je kunt in de render method ook templating libraries gebruiken. We leggen templating libraries ook uit.\
Volgende stap, we hallen de render method weg. Onze lijst wordt niet meer getoond, maar we gaan het anders doen! We gaan een event handler voor add toevoegen aan de intialize functie. De initialize zou je kunnen vergelijken met een constructor. Dit add event wordt nu niet door de user interface afgevuurd, maar door de model\
... Coding\
Nu als we iets toevoegen wordt, automatisch ons complete view gerenderd. Hier hebben we vooral veel aan in onze volgende stap, 
\b data opvragen van de serve
\b0 r!\
Alles wat we tot nu hebben gedaan, werkt uitsluitend in de browser. Maar in de meeste webapplicaties zul toch echt data van buiten willen opvragen.\
Freek zal onze lokale Model instanties weggooien. Het resultaat is weer een lege Todo\
.. Coding\
We hebben al een hele eenvoudige 
\b REST server
\b0 , die onze todo elementen als JSON retourneert.\
Als geven aan ons model mee waar de data staat, door het url property in te vullen. \
.. Coding\
Zorgen ervoor dat view gaat luisten naar 
\b reset
\b0  event\
Vervolgens roepen we fetch functie van Backbone aan om de data op te halen.\
... Coding\
De fetch method zal onderwater de data via ajax opvragen, eventuele oude data vervangen, en vervolgens het reset event afvuren\

\b Synchroniseren
\b0  van data kan ook (opslaan naar de server).\
Als eerste maken we een Add button, en koppelen het click event aan een nieuwe functie addItem\
... Coding\
De addItem roept de save functie aan, een standaardfunctie van Backbone model die onderwater een Ajax POST uitvoert voor nieuwe data, of een PUT voor data die al bestond. In dit geval wordt een POST afgevuurd.\
\
Zoals je ziet wordt onze render method erg groot. Om onze code wat leesbaarder te maken, kunnen we een 
\b client-side
\b0  
\b templating
\b0  library gebruiken. Een veelgebruikte templating library is 
\b Handlebars.js,
\b0  welke weer gebaseerd is op 
\b Mustache
\b0 .\
.. Coding (toevoegen via een script src\
Templating libraries maken het mogelijk je html in een template te zetten.\
.. Coding (template uittypen)\
Onze view gaan we nu aanpassen zodat de nieuwe template ook gebruikt wordt.\
.. Coding (template functionaliteit toevoegen aan de View)\
.. Coding (render function aanpassen)\
De render function is nu een stuk leesbaarder geworden, net als de html. De html zou je ook in een apart bestand kunnen zetten \
\
Dan is het nu tijd voor vragen}